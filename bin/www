#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app/app");
const http = require("http");
//const dbService = require("../app/services/db.service");

/**
 * Get port from environment and store in Express.
 */

const PORT = normalizePort(process.env.PORT || "9000");
const ENV = process.env.NODE_ENV || "development";
//const DB = dbService(ENV, false).start();

app.set('port', PORT);
app.set('env', ENV);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof app.get('port') === 'string'
    ? 'Pipe ' + app.get('port')
    : 'Port ' + app.get('port');

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('Express http-server listening on port %d in %s mode', app.get('port'), app.get('env'));
  //return DB;
}